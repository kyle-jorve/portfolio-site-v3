import{homeData}from"/dist/scripts/home-data.js";import{portfolioData}from"/dist/scripts/portfolio-data.js";import{cvData}from"/dist/scripts/cv-data.js";import{global}from"/dist/scripts/global.js";import{head}from"/dist/scripts/head.js";import{loader}from"/dist/scripts/loader.js";import{helpers}from"/dist/scripts/global-helpers.js";let data={...homeData},template;data.portfolio.featured=portfolioData.items.filter(e=>e.featured).slice(0,data.portfolio.itemsLimit),data.portfolio.url=portfolioData.url;for(let e in cvData.bio)data.bio[e]=cvData.bio[e];function observeForIntersection(){const a={body:global.els.body,bio:document.querySelector("#bio"),bioItems:[document.querySelector("#bioContent"),document.querySelector("#bioImg")],featuredWork:document.querySelector("#featured-work")};var e={threshold:.4};const t=new IntersectionObserver(function(e,r){e.forEach(e=>{if(e.isIntersecting){for(let e=0;e<a.featuredWorkItems.length;e++){const o=a.featuredWorkItems[e];var t=100*e;setTimeout(()=>{o.classList.add(s)},t)}r.disconnect()}})},e),o=new IntersectionObserver(function(e,r){e.forEach(e=>{if(e.isIntersecting){for(let e=0;e<a.bioItems.length;e++){const o=a.bioItems[e];var t=100*e;setTimeout(()=>{o.classList.add(s)},t)}r.disconnect()}})},e),s="active";a.featuredWorkItems=[document.querySelector("#featuredHeading"),...Array.from(a.featuredWork.querySelectorAll(".portfolio__item"))],t.observe(a.featuredWork),o.observe(a.bio)}data.bio.url=`${cvData.url}#resume`,template=Handlebars.templates[global.templateSources.home](data),global.els.header.insertAdjacentHTML("afterend",template),loader.init(observeForIntersection);